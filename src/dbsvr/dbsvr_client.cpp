/* dbsvr_client.cpp

 Generated by phxrpc_pb2client from dbsvr.proto

*/

#include "dbsvr_client.h"

#include <cstdlib>
#include <memory>
#include <mutex>

#include "phxrpc/http.h"
#include "phxrpc/rpc.h"

#include "phxrpc_dbsvr_stub.h"


using namespace std;


static phxrpc::ClientConfig global_dbsvrclient_config_;
static phxrpc::ClientMonitorPtr global_dbsvrclient_monitor_;


bool DbsvrClient::Init(const char *config_file) {
    return global_dbsvrclient_config_.Read(config_file);
}

const char *DbsvrClient::GetPackageName() {
    const char *ret = global_dbsvrclient_config_.GetPackageName();
    if (strlen(ret) == 0) {
        ret = "dbsvr";
    }
    return ret;
}

DbsvrClient::DbsvrClient() {
    static mutex monitor_mutex;
    if (!global_dbsvrclient_monitor_.get()) {
        monitor_mutex.lock();
        if (!global_dbsvrclient_monitor_.get()) {
            global_dbsvrclient_monitor_ = phxrpc::MonitorFactory::GetFactory()->
                    CreateClientMonitor(GetPackageName());
        }
        global_dbsvrclient_config_.SetClientMonitor(global_dbsvrclient_monitor_);
        monitor_mutex.unlock();
    }
}

DbsvrClient::~DbsvrClient() {
}

int DbsvrClient::PHXEcho(const google::protobuf::StringValue &req, google::protobuf::StringValue *resp)
{
    const phxrpc::Endpoint_t *ep{global_dbsvrclient_config_.GetRandom()};

    if (ep) {
        phxrpc::BlockTcpStream socket;
        bool open_ret{phxrpc::PhxrpcTcpUtils::Open(&socket, ep->ip, ep->port,
                global_dbsvrclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                *(global_dbsvrclient_monitor_.get()))};
        if (open_ret) {
            socket.SetTimeout(global_dbsvrclient_config_.GetSocketTimeoutMS());
            phxrpc::HttpMessageHandlerFactory http_msg_factory;
            DbsvrStub stub(socket, *(global_dbsvrclient_monitor_.get()), http_msg_factory);
            return stub.PHXEcho(req, resp);
        }

    }

    return -1;
}

int DbsvrClient::PHXBatchEcho(const google::protobuf::StringValue &req, google::protobuf::StringValue *resp)
{
    int ret{-1};
    size_t echo_server_count{2};
    uthread_begin;
    for (size_t i{0}; echo_server_count > i; ++i) {
        uthread_t [=, &uthread_s, &ret](void *) {
            const phxrpc::Endpoint_t *ep = global_dbsvrclient_config_.GetByIndex(i);
            if (ep != nullptr) {
                phxrpc::UThreadTcpStream socket;
                if (phxrpc::PhxrpcTcpUtils::Open(&uthread_s, &socket, ep->ip, ep->port,
                    global_dbsvrclient_config_.GetConnectTimeoutMS(), *(global_dbsvrclient_monitor_.get()))) {
                    socket.SetTimeout(global_dbsvrclient_config_.GetSocketTimeoutMS());
                    phxrpc::HttpMessageHandlerFactory http_msg_factory;
                    DbsvrStub stub(socket, *(global_dbsvrclient_monitor_.get()), http_msg_factory);
                    int this_ret{stub.PHXEcho(req, resp)};
                    if (this_ret == 0) {
                        ret = this_ret;
                        uthread_s.Close();
                    }
                }
            }
        };
    }
    uthread_end;
    return ret;
}

int DbsvrClient::Set(const dbsvr::SetReq &req, dbsvr::SetResp *resp)
{
    const phxrpc::Endpoint_t *ep{global_dbsvrclient_config_.GetRandom()};

    if (ep) {
        phxrpc::BlockTcpStream socket;
        bool open_ret{phxrpc::PhxrpcTcpUtils::Open(&socket, ep->ip, ep->port,
                global_dbsvrclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                *(global_dbsvrclient_monitor_.get()))};
        if (open_ret) {
            socket.SetTimeout(global_dbsvrclient_config_.GetSocketTimeoutMS());
            phxrpc::HttpMessageHandlerFactory http_msg_factory;
            DbsvrStub stub(socket, *(global_dbsvrclient_monitor_.get()), http_msg_factory);
            return stub.Set(req, resp);
        }

    }

    return -1;
}

int DbsvrClient::Get(const dbsvr::GetReq &req, dbsvr::GetResp *resp)
{
    const phxrpc::Endpoint_t *ep{global_dbsvrclient_config_.GetRandom()};

    if (ep) {
        phxrpc::BlockTcpStream socket;
        bool open_ret{phxrpc::PhxrpcTcpUtils::Open(&socket, ep->ip, ep->port,
                global_dbsvrclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                *(global_dbsvrclient_monitor_.get()))};
        if (open_ret) {
            socket.SetTimeout(global_dbsvrclient_config_.GetSocketTimeoutMS());
            phxrpc::HttpMessageHandlerFactory http_msg_factory;
            DbsvrStub stub(socket, *(global_dbsvrclient_monitor_.get()), http_msg_factory);
            return stub.Get(req, resp);
        }

    }

    return -1;
}

